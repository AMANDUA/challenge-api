{
	"info": {
		"_postman_id": "ff61aad3-5167-4ac5-b054-ee2ff3a3eb90",
		"name": "topcoder-challenge-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ChallengeSettings",
			"item": [
				{
					"name": "create challenge setting",
					"item": [
						{
							"name": "create test data",
							"item": [
								{
									"name": "test data - create setting 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "020107ea-175f-4298-a6d6-b7a9520f0695",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_SETTING_ID1\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"setting-name-1\"\n}"
										},
										"url": {
											"raw": "{{URL}}/challengeSettings",
											"host": [
												"{{URL}}"
											],
											"path": [
												"challengeSettings"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create setting 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "020107ea-175f-4298-a6d6-b7a9520f0695",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_SETTING_ID2\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"setting-name-2\"\n}"
										},
										"url": {
											"raw": "{{URL}}/challengeSettings",
											"host": [
												"{{URL}}"
											],
											"path": [
												"challengeSettings"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create setting 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "020107ea-175f-4298-a6d6-b7a9520f0695",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_SETTING_ID3\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"setting-name-3\"\n}"
										},
										"url": {
											"raw": "{{URL}}/challengeSettings",
											"host": [
												"{{URL}}"
											],
											"path": [
												"challengeSettings"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create setting 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "020107ea-175f-4298-a6d6-b7a9520f0695",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_SETTING_ID4\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"setting-name-4\"\n}"
										},
										"url": {
											"raw": "{{URL}}/challengeSettings",
											"host": [
												"{{URL}}"
											],
											"path": [
												"challengeSettings"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create setting 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "020107ea-175f-4298-a6d6-b7a9520f0695",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_SETTING_ID5\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"setting-name-5\"\n}"
										},
										"url": {
											"raw": "{{URL}}/challengeSettings",
											"host": [
												"{{URL}}"
											],
											"path": [
												"challengeSettings"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "create by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"SETTINGA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"SETTINGB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-admin\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"invalid\": \"invalid\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create with invalid token 1 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-invalid-token\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create with invalid token 2 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-invalid\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-admin\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create with m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-invalid-token\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-admin\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"setting-NAME-1\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "020107ea-175f-4298-a6d6-b7a9520f0695",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_SETTING_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_settings_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"setting-name-by-m2m\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "020107ea-175f-4298-a6d6-b7a9520f0695",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"setting-name-by-m2m-failure\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge setting",
					"item": [
						{
							"name": "search challenge setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ac29d3f-3e7b-4de4-893c-8d5117b96f9e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings?name=-NAME-&page=2&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									],
									"query": [
										{
											"key": "name",
											"value": "-NAME-"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge setting invalid parameters 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12584f05-a23b-4b99-97b7-ed1c3c32f3ea",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings?invalid=-NAME-&page=2&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									],
									"query": [
										{
											"key": "invalid",
											"value": "-NAME-"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge setting with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45e8dbe3-65f4-4657-a194-7b3c996c0173",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings?name=-NAME-&page=2&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									],
									"query": [
										{
											"key": "name",
											"value": "-NAME-"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge setting without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45e8dbe3-65f4-4657-a194-7b3c996c0173",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings?name=-NAME-&page=2&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									],
									"query": [
										{
											"key": "name",
											"value": "-NAME-"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge setting by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45e8dbe3-65f4-4657-a194-7b3c996c0173",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings?name=-NAME-&page=2&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									],
									"query": [
										{
											"key": "name",
											"value": "-NAME-"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge setting using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ac29d3f-3e7b-4de4-893c-8d5117b96f9e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_settings_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings?name=-NAME-&page=2&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									],
									"query": [
										{
											"key": "name",
											"value": "-NAME-"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge setting using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ac29d3f-3e7b-4de4-893c-8d5117b96f9e",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings?name=-NAME-&page=2&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings"
									],
									"query": [
										{
											"key": "name",
											"value": "-NAME-"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge setting",
					"item": [
						{
							"name": "get challenge setting 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44216e96-53cb-4b0a-93f8-cb64e2cfe3e5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot2_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge setting 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "970c66f9-f8b5-452b-b1f9-91bbeee87a98",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge setting invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8943e46-a557-4c4c-9383-dfbdda50070d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge setting without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8943e46-a557-4c4c-9383-dfbdda50070d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge setting with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8943e46-a557-4c4c-9383-dfbdda50070d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge setting by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8943e46-a557-4c4c-9383-dfbdda50070d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge setting not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8943e46-a557-4c4c-9383-dfbdda50070d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings/11111111-a41a-4b80-b6dd-90f3816ada99",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"11111111-a41a-4b80-b6dd-90f3816ada99"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge setting using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44216e96-53cb-4b0a-93f8-cb64e2cfe3e5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_settings_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge setting using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44216e96-53cb-4b0a-93f8-cb64e2cfe3e5",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge setting",
					"item": [
						{
							"name": "update challenge setting 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45556ec6-f562-47e9-818f-24f5c60f5b10",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name1\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge setting 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a5e19ab-aac5-4920-9bb5-a75901430e7f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-NAME2\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge setting 2 again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f021542f-4988-4efb-8405-0cdb99d89193",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name2\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge setting invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c321bdf-37fe-40ec-8f71-16142282d071",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-NAME2\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge setting invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c321bdf-37fe-40ec-8f71-16142282d071",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"setting-NAME-failure\",\n\t\"invalid\": \"invalid\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge setting without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6949e508-47fd-4c66-b51a-f8da8a78879d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-failure\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge setting by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6949e508-47fd-4c66-b51a-f8da8a78879d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{user_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-failure\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge setting 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c321bdf-37fe-40ec-8f71-16142282d071",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-NAME2\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings/11111111-a41a-4b80-b6dd-90f3816ada99",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"11111111-a41a-4b80-b6dd-90f3816ada99"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge setting duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c321bdf-37fe-40ec-8f71-16142282d071",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"setting-NAME-2\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge setting using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45556ec6-f562-47e9-818f-24f5c60f5b10",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_settings_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-by-m2m\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings/{{TEST_SETTING_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{TEST_SETTING_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge setting using m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45556ec6-f562-47e9-818f-24f5c60f5b10",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-by-m2m\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeSettings/{{TEST_SETTING_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeSettings",
										"{{TEST_SETTING_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "ChallengeTypes",
			"item": [
				{
					"name": "create challenge type",
					"item": [
						{
							"name": "create test data",
							"item": [
								{
									"name": "test data - create type 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "986df394-b29e-42a6-83da-592eb3db1442",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID1\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-1\",\n\t\"description\": \"descritpion1\",\n\t\"isActive\": true\n}"
										},
										"url": {
											"raw": "{{URL}}/challengeTypes",
											"host": [
												"{{URL}}"
											],
											"path": [
												"challengeTypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "986df394-b29e-42a6-83da-592eb3db1442",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID2\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-2\",\n\t\"isActive\": true\n}"
										},
										"url": {
											"raw": "{{URL}}/challengeTypes",
											"host": [
												"{{URL}}"
											],
											"path": [
												"challengeTypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "986df394-b29e-42a6-83da-592eb3db1442",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID3\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-3\",\n\t\"description\": \"descritpion3\",\n\t\"isActive\": true\n}"
										},
										"url": {
											"raw": "{{URL}}/challengeTypes",
											"host": [
												"{{URL}}"
											],
											"path": [
												"challengeTypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "986df394-b29e-42a6-83da-592eb3db1442",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID4\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-4\",\n\t\"isActive\": false\n}"
										},
										"url": {
											"raw": "{{URL}}/challengeTypes",
											"host": [
												"{{URL}}"
											],
											"path": [
												"challengeTypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "986df394-b29e-42a6-83da-592eb3db1442",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID5\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-5\",\n\t\"description\": \"descritpion5\",\n\t\"isActive\": false\n}"
										},
										"url": {
											"raw": "{{URL}}/challengeTypes",
											"host": [
												"{{URL}}"
											],
											"path": [
												"challengeTypes"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "create by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "986df394-b29e-42a6-83da-592eb3db1442",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "986df394-b29e-42a6-83da-592eb3db1442",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-admin\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "986df394-b29e-42a6-83da-592eb3db1442",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"failure\",\n\t\"isActive\": true\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "986df394-b29e-42a6-83da-592eb3db1442",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "986df394-b29e-42a6-83da-592eb3db1442",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create via user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "986df394-b29e-42a6-83da-592eb3db1442",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "986df394-b29e-42a6-83da-592eb3db1442",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"type-NAME-1\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "986df394-b29e-42a6-83da-592eb3db1442",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_TYPE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_types_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-m2m\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "986df394-b29e-42a6-83da-592eb3db1442",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-m2m\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge types",
					"item": [
						{
							"name": "search challenge types 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83820cb-38d7-440a-af4f-215caf579bec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeTypes?name=-name-&description=cri&isActive=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes"
									],
									"query": [
										{
											"key": "name",
											"value": "-name-"
										},
										{
											"key": "description",
											"value": "cri"
										},
										{
											"key": "isActive",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "990241ce-362e-47d7-b619-6cf8f862a4bf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeTypes?isActive=true&page=2&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes"
									],
									"query": [
										{
											"key": "isActive",
											"value": "true"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e183d38-425d-433b-8487-6c21b9a5795c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeTypes?invalid=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge type",
					"item": [
						{
							"name": "get challenge type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca548603-f08a-47d7-a4a8-bb68fdb62b31",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge type 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ed529b6-2e86-49eb-a575-603e071d2514",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed8483b2-a9f5-49ac-9d9f-3cfd2a1872fc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeTypes/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed8483b2-a9f5-49ac-9d9f-3cfd2a1872fc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challengeTypes/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update challenge type",
					"item": [
						{
							"name": "partial update challenge type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge type 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b1c22ec-62df-4f2b-95d6-924c3259e20c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"add-description\",\n\t\"isActive\": true\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f069a8a-ed67-4364-b10a-825b3b8ab828",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cdf6f5f-d4d3-4d01-9ecd-856c2e03eb20",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1234,\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27836ef1-3d48-4d67-a2bf-63a93d7ca189",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type via user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87677a37-622e-440c-ba16-edf6f3b58e3a",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f069a8a-ed67-4364-b10a-825b3b8ab828",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cdf6f5f-d4d3-4d01-9ecd-856c2e03eb20",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-1\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge type using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_types_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"patch-by-m2m\",\n\t\"description\": \"patch-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"patch-by-m2m\",\n\t\"description\": \"patch-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge type",
					"item": [
						{
							"name": "update challenge type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-1\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4795bcd3-e62c-4431-8f7d-e2a6441d6031",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "867406cc-7f20-4aa4-b3d0-40082ba72d7d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "867406cc-7f20-4aa4-b3d0-40082ba72d7d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": 12345,\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "867406cc-7f20-4aa4-b3d0-40082ba72d7d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"update-description2\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "867406cc-7f20-4aa4-b3d0-40082ba72d7d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type via user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "867406cc-7f20-4aa4-b3d0-40082ba72d7d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{user_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "867406cc-7f20-4aa4-b3d0-40082ba72d7d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "867406cc-7f20-4aa4-b3d0-40082ba72d7d",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-2\",\n\t\"description\": \"description\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_types_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-by-m2m\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/challengeTypes/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengeTypes",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "ChallengePhases",
			"item": [
				{
					"name": "create challenge phase",
					"item": [
						{
							"name": "create phase 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isActive\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase 2 has predecessor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-2\",\n\t\"predecessor\": \"{{PHASEA_ID}}\",\n\t\"isActive\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASEC_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-3\",\n\t\"isActive\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create inactive phase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-4\",\n\t\"isActive\": false,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"has-description\",\n\t\"isActive\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isActive\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isActive\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase via copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isActive\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"PHASE-1\",\n\t\"description\": \"has-description\",\n\t\"isActive\": true,\n\t\"duration\": 100000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_PHASE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-by-m2m\",\n\t\"description\": \"m2m-description\",\n\t\"isActive\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-by-m2m\",\n\t\"description\": \"m2m-description\",\n\t\"isActive\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge phases",
					"item": [
						{
							"name": "search challenge phases by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases?name=ph",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									],
									"query": [
										{
											"key": "name",
											"value": "ph"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1428ff8d-857a-4bcc-85bc-8fffd41cb214",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases?invalid=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4170ca10-42e9-4278-93bf-65b9d60a1477",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4170ca10-42e9-4278-93bf-65b9d60a1477",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4170ca10-42e9-4278-93bf-65b9d60a1477",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4170ca10-42e9-4278-93bf-65b9d60a1477",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases?name=ph",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									],
									"query": [
										{
											"key": "name",
											"value": "ph"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge phases using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases?name=ph",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases"
									],
									"query": [
										{
											"key": "name",
											"value": "ph"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge phase",
					"item": [
						{
							"name": "get challenge phase by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challengePhases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update challenge phase",
					"item": [
						{
							"name": "partial update challenge phase 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isActive\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge phase 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-2\",\n\t\"predecessor\": \"{{PHASEC_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isActive\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isActive\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isActive\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isActive\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isActive\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge phase duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-PHASE-2\",\n\t\"isActive\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-by-m2m\",\n\t\"isActive\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-by-m2m\",\n\t\"isActive\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge phase",
					"item": [
						{
							"name": "update challenge phase 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isActive\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-PHASE-2\",\n\t\"predecessor\": \"{{PHASEA_ID}}\",\n\t\"description\": \"add-description-in-put\",\n\t\"isActive\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isActive\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 12345,\n\t\"isActive\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isActive\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isActive\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isActive\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isActive\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phAse-3\",\n\t\"isActive\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-by-m2m\",\n\t\"isActive\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-by-m2m\",\n\t\"isActive\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "delete challenge phase",
					"item": [
						{
							"name": "delete challenge phase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase used as predecessor 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challengePhases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_delete}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challengePhases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challengePhases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "TimelineTemplates",
			"item": [
				{
					"name": "create timeline template",
					"item": [
						{
							"name": "create timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEMPLATEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create inactive timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEMPLATEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timeline template for delete testing later",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEMPLATEC_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-3\",\n    \"description\": \"desc-3\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template contain inactive phase 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"description\": \"desc-4\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"name\": \"phase-4\",\n        \"isActive\": false,\n        \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template contain inconsisitent data 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"description\": \"desc-4\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"inconsistent\",\n        \"isActive\": false,\n        \"duration\": 10000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"tempLATE-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_TEMPLATE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-by-m2m\",\n    \"description\": \"desc-by-m2m\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-by-m2m\",\n    \"description\": \"desc-by-m2m\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "search timeline templates",
					"item": [
						{
							"name": "search timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates?name=1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									],
									"query": [
										{
											"key": "name",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timeline template by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates?name=LA",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									],
									"query": [
										{
											"key": "name",
											"value": "LA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search timeline template invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates?invalid=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates?name=1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									],
									"query": [
										{
											"key": "name",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates?name=1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									],
									"query": [
										{
											"key": "name",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates?name=1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									],
									"query": [
										{
											"key": "name",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timeline template by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates?name=1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									],
									"query": [
										{
											"key": "name",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates?name=1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									],
									"query": [
										{
											"key": "name",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fbd663d-76fb-4c4d-b7b6-0baf9ca6b86e",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates?name=1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates"
									],
									"query": [
										{
											"key": "name",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "get timeline template",
					"item": [
						{
							"name": "get timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get timeline template by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3dd07c-3ce6-47fe-86eb-a0a01ea1cfec",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update timeline template",
					"item": [
						{
							"name": "partial update timeline template 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update timeline template 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\t\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template phases can't be empty 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\",\n    \"phases\": []\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template  duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update timeline template using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ad399d-6048-445e-a0c1-b99395ce0b76",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-m2m\",\n    \"description\": \"new-desc-m2m\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "update timeline template",
					"item": [
						{
							"name": "update timeline template 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update timeline template 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template incorrect phase 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-3\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"id\": \"{{SETTINGA_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template inconsistent phase 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-3\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"inconsistent-datat\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea1db72-9445-4dae-a372-fcd7c8c9de80",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TEMPlate-2\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-template-by-m2m\",\n    \"description\": \"update-desc-by-m2m\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e1d09d-b72f-4809-ac29-c458b90cb631",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-template-by-m2m\",\n    \"description\": \"update-desc-by-m2m\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"name\": \"new-phase-1\",\n        \"isActive\": true,\n        \"duration\": 20000\n      },\n      {\n        \"id\": \"{{PHASEB_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "delete timeline template",
					"item": [
						{
							"name": "delete timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete timeline template using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_delete}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e547ddc3-44a5-413e-a9e7-f98bb2262398",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timelineTemplates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timelineTemplates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Challenges",
			"item": [
				{
					"name": "create challenge",
					"item": [
						{
							"name": "create challenge by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"CHALLENGE_ID1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"CHALLENGE_ID2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID2}}\",\n\t\"track\": \"test-track-1\",\n\t\"name\": \"test-create-copilot\",\n\t\"description\": \"test-description\",\n\t\"challengeSettings\": [\n\t\t{\n\t\t\t\"type\": \"{{TEST_SETTING_ID3}}\",\n\t\t\t\"value\": \"value3\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"{{TEST_SETTING_ID4}}\",\n\t\t\t\"value\": \"value4\"\n\t\t}\n\t],\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"id\": \"{{PHASEA_ID}}\",\n            \"name\": \"new-phase-1\",\n            \"isActive\": true,\n            \"duration\": 1000000\n        },\n        {\n            \"id\": \"{{PHASEB_ID}}\",\n            \"name\": \"new-PHASE-2\",\n            \"description\": \"add-description-in-put\",\n            \"predecessor\": \"{{PHASEA_ID}}\",\n            \"isActive\": true,\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\",\n\t\"groups\": [\"group1\", \"group2\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": {\"tag1\": \"tag2\"},\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"invalid\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using invactive time template 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEB_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using empty prizeSets 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using empty prizes array 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": []\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": 12345,\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using empty phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid settings 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"challengeSettings\": [\n\t\t{\n\t\t\t\"type\": \"{{TYPEA_ID}}\",\n\t\t\t\"value\": \"value3\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"{{TEST_SETTING_ID4}}\",\n\t\t\t\"value\": \"value4\"\n\t\t}\n\t],\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"inconsistent\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASED_ID}}\",\n        \t\"name\": \"phase-4\",\n    \t\t\"isActive\": false,\n\t    \t\"duration\": 2000000\n        },\n        {\n        \t\"id\": \"{{TYPEA_ID}}\",\n        \t\"name\": \"not-found\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid prizeSet type 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"invalid\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "faiclure reate challenge invalid prize type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"invalid\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_CHALLENGE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create-m2m\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "upload attachment",
					"item": [
						{
							"name": "upload attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"ATTACHMENT_ID1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "upload attachment by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"ATTACHMENT_ID2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment by normal user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment by copilot not of challenge resource 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment missing token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment wrong file name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "wrong",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "upload attachment using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"TEST_ATTACHMENT_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_create}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "download attachment",
					"item": [
						{
							"name": "download attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "download attachment by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "download attachment by challenge registrant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment challenge id mismatch 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment by expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment by invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment by none challenge registrant 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment by anonymous user 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "download attachment using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}/attachments/{{TEST_ATTACHMENT_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}",
										"attachments",
										"{{TEST_ATTACHMENT_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}/attachments/{{TEST_ATTACHMENT_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}",
										"attachments",
										"{{TEST_ATTACHMENT_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22913a87-9231-4269-a929-a3f5eaa1e265",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0bf2e29d-7be3-495d-b547-b32adeb54293",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge",
					"item": [
						{
							"name": "search challenge by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f5c58f0-3b8c-4a8a-a6c8-2df8bd6d2cf0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2019-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f5c58f0-3b8c-4a8a-a6c8-2df8bd6d2cf0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2019-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by normal user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f5c58f0-3b8c-4a8a-a6c8-2df8bd6d2cf0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2019-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by anonymous user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f5c58f0-3b8c-4a8a-a6c8-2df8bd6d2cf0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2019-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid date 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f5c58f0-3b8c-4a8a-a6c8-2df8bd6d2cf0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=abc&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "abc"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "475c83d7-16fa-4e68-a5ce-5021b0ba1af2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?invalid=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge using m2m with read scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f5c58f0-3b8c-4a8a-a6c8-2df8bd6d2cf0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2019-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge using m2m without read scope(same as anonymous user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f5c58f0-3b8c-4a8a-a6c8-2df8bd6d2cf0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2019-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge",
					"item": [
						{
							"name": "get challenge 1 by anonymous user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1b8d8ca-64df-494c-9b8a-8507058e8692",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a63d8e6-2604-4836-9d3a-1f4f5b099305",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a63d8e6-2604-4836-9d3a-1f4f5b099305",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 by user without group access 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a63d8e6-2604-4836-9d3a-1f4f5b099305",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d24e0eab-d954-4abb-8444-8ef159337f07",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d24e0eab-d954-4abb-8444-8ef159337f07",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge using m2m token with read scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a63d8e6-2604-4836-9d3a-1f4f5b099305",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge 2 using m2m token without scope 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a63d8e6-2604-4836-9d3a-1f4f5b099305",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge 2 using invalid token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a63d8e6-2604-4836-9d3a-1f4f5b099305",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								},
								"description": "it will be consided as anonymous user"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge",
					"item": [
						{
							"name": "update challenge 1 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type 2\",\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"forumId\": 456456,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID1}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"track\": \"update-track-1\",\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"id\": \"{{PHASEA_ID}}\",\n            \"name\": \"new-phase-1\",\n            \"isActive\": true,\n            \"duration\": 1000000\n        },\n        {\n            \"id\": \"{{PHASEB_ID}}\",\n            \"name\": \"new-PHASE-2\",\n            \"description\": \"add-description-in-put\",\n            \"predecessor\": \"{{PHASEA_ID}}\",\n            \"isActive\": true,\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"reviewType\": \"review type 222\",\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"forumId\": 456456,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\", \"group3\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge invalid groups 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type 2\",\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"forumId\": 456456,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID1}}\"],\n\t\"groups\": \"group1 group2\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge attachment not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type 2\",\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"forumId\": 456456,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{TYPEA_ID}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"invalid\": 123,\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"track\": \"update-track-1\",\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"id\": \"{{PHASEA_ID}}\",\n            \"name\": \"new-phase-1\",\n            \"isActive\": true,\n            \"duration\": 1000000\n        },\n        {\n            \"id\": \"{{PHASEB_ID}}\",\n            \"name\": \"new-PHASE-2\",\n            \"description\": \"add-description-in-put\",\n            \"predecessor\": \"{{PHASEA_ID}}\",\n            \"isActive\": true,\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"reviewType\": \"review type 2\",\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"forumId\": 456456,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID1}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge by different copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"track\": \"update-track-1\",\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"id\": \"{{PHASEA_ID}}\",\n            \"name\": \"new-phase-1\",\n            \"isActive\": true,\n            \"duration\": 1000000\n        },\n        {\n            \"id\": \"{{PHASEB_ID}}\",\n            \"name\": \"new-PHASE-2\",\n            \"description\": \"add-description-in-put\",\n            \"predecessor\": \"{{PHASEA_ID}}\",\n            \"isActive\": true,\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"reviewType\": \"review type 222\",\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"forumId\": 456456,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"track\": \"update-track-1\",\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"id\": \"{{PHASEA_ID}}\",\n            \"name\": \"new-phase-1\",\n            \"isActive\": true,\n            \"duration\": 1000000\n        },\n        {\n            \"id\": \"{{PHASEB_ID}}\",\n            \"name\": \"new-PHASE-2\",\n            \"description\": \"add-description-in-put\",\n            \"predecessor\": \"{{PHASEA_ID}}\",\n            \"isActive\": true,\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"reviewType\": \"review type 222\",\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"forumId\": 456456,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"track\": \"update-track-1\",\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"id\": \"{{PHASEA_ID}}\",\n            \"name\": \"new-phase-1\",\n            \"isActive\": true,\n            \"duration\": 1000000\n        },\n        {\n            \"id\": \"{{PHASEB_ID}}\",\n            \"name\": \"new-PHASE-2\",\n            \"description\": \"add-description-in-put\",\n            \"predecessor\": \"{{PHASEA_ID}}\",\n            \"isActive\": true,\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"reviewType\": \"review type 222\",\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"forumId\": 456456,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-update-m2m\",\n\t\"description\": \"test-update-m2m\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"test-update-m2m\",\n\t\"description\": \"test-update-m2m\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update challenge",
					"item": [
						{
							"name": "partial update challenge 1 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"track\": \"update-new-track\",\n\t\"name\": \"update-name\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 5000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 6000000\n        }\n\t],\n\t\"tags\": [\"tag1\"],\n\t\"forumId\": 456456,\n\t\"status\": \"Completed\",\n\t\"groups\": [],\n\t\"attachmentIds\": []\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"challengeSettings\": [\n\t\t{\n\t\t\t\"type\": \"{{TEST_SETTING_ID5}}\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t],\n\t\"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 100\n                }\n            ]\n        }\n    ],\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\", \"group3\", \"group4\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge duplicate groups 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"track\": \"update-new-track\",\n\t\"name\": \"update-name\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 5000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 6000000\n        }\n\t],\n\t\"tags\": [\"tag1\"],\n\t\"forumId\": 456456,\n\t\"status\": \"Completed\",\n\t\"groups\": [\"g1\", \"g1\"],\n\t\"attachmentIds\": []\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge null group 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"track\": \"update-new-track\",\n\t\"name\": \"update-name\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 5000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 6000000\n        }\n\t],\n\t\"tags\": [\"tag1\"],\n\t\"forumId\": 456456,\n\t\"status\": \"Completed\",\n\t\"groups\": [null],\n\t\"attachmentIds\": []\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge by different copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"challengeSettings\": [\n\t\t{\n\t\t\t\"type\": \"{{TEST_SETTING_ID5}}\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"track\": \"update-new-track\",\n\t\"name\": \"update-name\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"invalid\": \"{{TEST_TYPE_ID4}}\",\n\t\"track\": \"update-new-track\",\n\t\"name\": \"update-name\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"challengeSettings\": [\n\t\t{\n\t\t\t\"type\": \"{{TEST_SETTING_ID5}}\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03483bad-dfb2-45d1-bf42-35dd3bd46dad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID1}}\",\n\t\"track\": \"test-track\",\n\t\"name\": \"new-update-m2m\",\n\t\"description\": \"patch-update-m2m\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"new-phase-1\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASEB_ID}}\",\n        \t\"name\": \"new-PHASE-2\",\n        \t\"description\": \"add-description-in-put\",\n\t    \t\"predecessor\": \"{{PHASEA_ID}}\",\n    \t\t\"isActive\": true,\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"reviewType\": \"review type\",\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"forumId\": 456,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "AuditLogs",
			"item": [
				{
					"name": "search 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fd8c9f4-13e3-47d0-9c78-1e544521d97d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challengeAuditLogs?challengeId={{CHALLENGE_ID1}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challengeAuditLogs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5072ea30-96bf-4ef4-a9bd-cf9d90fb0d2a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challengeAuditLogs?challengeId={{CHALLENGE_ID2}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&createdBy=ghostar",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challengeAuditLogs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID2}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "ghostar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search by user 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9f7cf4a-e004-4e2a-a045-19993336fb11",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challengeAuditLogs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challengeAuditLogs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search with expired token 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9f7cf4a-e004-4e2a-a045-19993336fb11",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{expire_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challengeAuditLogs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challengeAuditLogs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search invalid parameter 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcf77a12-df13-4175-a964-3a88386896a3",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challengeAuditLogs?challengeId={{CHALLENGE_ID1}}&invalid=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challengeAuditLogs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "invalid",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search using m2m token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fd8c9f4-13e3-47d0-9c78-1e544521d97d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{m2m_challenge_audit_logs_read}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challengeAuditLogs?challengeId={{CHALLENGE_ID1}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challengeAuditLogs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search using forbidden m2m token 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fd8c9f4-13e3-47d0-9c78-1e544521d97d",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{m2m_challenges_read}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challengeAuditLogs?challengeId={{CHALLENGE_ID1}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challengeAuditLogs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HealthCheck",
			"item": [
				{
					"name": "get app health status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fd8c9f4-13e3-47d0-9c78-1e544521d97d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}/health",
							"host": [
								"{{URL}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "38cbc788-59a2-448e-bd0f-8158b40d0f40",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8f030397-7ae8-42c2-af6a-ec35a4a64443",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}